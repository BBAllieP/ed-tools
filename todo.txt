[x] create widget for tracking overall progress on mission tracker - Circular (creds)
[x] create widget for tracking overall progress on mission tracker - Linear (kills)
[x] calculate efficiency metrics for mission tracker header
[?] put mission tracker header in collapseable to save space
[x] ensmallen or get rid of the title bar on the pages (include instead in app bar on navigation)
[_] Backend: perform sanity check on mission redirect to update counts on unfinished missions for other factions
     This could actually cause a lot of problems if a mission is abandone
[x] Figure out how to spawn backend on load
[x] figure out build pipeline:
     - build go to executable first
     - execute backend on electron load
[x] test on live
[x] get alpha testers and ensure it works in other people's computers
     Thanks alpha testers! Looks like we have some bugs to work out and some new functionality to add:
[x] Refactor backend->frontend to only send updates when updated, not have frontend consistently polling for the whole data stack
[x] fix bug that double counts bounties
[] add snackbars when message received from backend (notistack)
[] Make layout for smaller screens
[] Make both current reward total and stack reward total visible in the circle progress
[x] fix backend crash bugs (new)
[x] Implement autoupdate in electron

*** MVP Ready
[x] add cute lil "under construction" pages for the tabs not yet working
[] cleanup code base (lol never)
[] maybe add alerts for when you start taking hull damage
[] (far future) update a web API for potential mobile app later on


NEXT PROJECTS:
[] Import fleet from journal or allow from Inara
    - use this to make export/copy functionality for importing to other tools
    - need to figure out the actual API, the Journal doesn't log ship loadouts except on startup
[...] Build route planner helper:
     [x] takes as input CSV export from spansh that can be dragged and dropped on window
     [x] auto determine if FC route, R2R or neutron plotter
     [x] copy to clipboard next step in route
     [x] determine when a jump has happened and copy next destination
     [x] see if it's possible to see when a body has been scanned
     [x] auto-tally R2R gains
     [x] mark visited systems and bodies as complete after jump/scanned
     [later] handle fleet carrier
     [x] handle exact route plotter
          [x] implement in backend
          [x] double check that new route type doesnt break anything
               [x] it did, fix issue loading new route
          [x] implement refuel icon for exact route plotter
     [...] test
          [] refit DBX for long range exploring
          [] 1 road to riches route
               [] copy next destination working
               [] copy next destination still works after using other system copy button
               [] can still copy old destinations
               [] system icons update after visited
               [] body icons update after scanned
               [] Total value updates after scan
          [] 1 neutron plotter route
               [] Supercharge works
               [] a few jumps work with copy etc
          [] 1 exact plotter route
               [] make sure ship loadout exactly calculated for route calc
               [] normal checks on copy etc
[]   Keybindings backup tool
     x[] save each binds file to app directory
     [x] check for changes on app startup
          [x] store hash for each file in app directory
          [x] check contents of keybinds folder to see if they match app directory
               [x] copy any new files to app directory and calculate their hash
               [x] store JSON of id=hash, binds=file_location
               [x] calculate hash for keybinds files
               [x] compare hashes and names               
               [...] for mismatches, store results to prompt user that binds changed since last startup
                    [] user chooses to revert to old binds or save new ones
                         [] on revert copy from appdir to bindsdir
                         [] on accept copy from binds to appdir and update hashes
     [] monitor keybinds folder for changes during application run
          [] use fsnotify or watcher to check if any changes are made
          [] if change detected, prompt user to take action
     [] frontend page
     [] Restore backup functionality
     [] Swap controller ID functionality (for setups using 2 of same controller)
     [] Manual edit functionality?
[] Shield Calculator
     - Implement go shield calculator in backend
     - Customizable UI for shield calculator parameters
[] Engineering mats?
     - Could be possible to recreate EDEngineer basically but woof that's a lot of work
     - would love to add:
        - better search functionality, 
        - recommend number of rolls, 
        - suggest where to find what you need
